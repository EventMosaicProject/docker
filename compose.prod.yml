version: '3.8'

services:
  # Eureka сервер
  em-discovery:
    build:
      context: ../em-discovery
      dockerfile: Dockerfile
    env_file:
      - ./env/discovery.prod.env
    ports:
      - "8761:8761"
    volumes:
      - ./logs:/app/logs
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway
  em-gateway:
    build:
      context: ../em-gateway
      dockerfile: Dockerfile
    env_file:
      - ./env/gateway.prod.env
    ports:
      - "8080:8080"
    volumes:
      - ./logs:/app/logs
    depends_on:
      - em-discovery
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.17.1
    env_file:
      - ./env/elasticsearch.prod.env
    environment:
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-secret}
      - ELASTIC_USERNAME=elastic
    ports:
      - "9200:9200"
      - "9300:9300"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - es_data:/usr/share/elasticsearch/data                                                       # Том для постоянного хранения данных
      - ./elasticsearch/elasticsearch.prod.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro # Монтирование кастомного файла конфигурации
      - ./elasticsearch/security.yml:/usr/share/elasticsearch/config/security.yml:ro                # Добавляем файл безопасности
      - ./elasticsearch/certs:/usr/share/elasticsearch/config/certs:ro                              # Монтируем директорию с сертификатами
    restart: always

  # Redis
  redis:
    image: redis:7.4.2
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data:rw                                                                         # Постоянное хранение данных Redis между перезапусками
      - ./redis/redis.prod.conf:/usr/local/etc/redis/redis.conf:ro                                  # Подключаем защищённую конфигурацию Redis
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis-password}
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]                                                          # Проверка через ping
      interval: 30s                                                                                 # Интервал проверки
      timeout: 10s                                                                                  # Таймаут ожидания ответа
      retries: 3                                                                                    # Количество попыток

  # API сервис
  em-api:
    build:
      context: ../em-api
      dockerfile: Dockerfile
    env_file:
      - ./env/api.prod.env
    expose:
      - "8080"                                                                                     # Работает внутри сети, порт публиковать не нужно
    volumes:
      - ./logs:/app/logs
    depends_on:
      - elasticsearch
      - em-discovery
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Adapter сервис
  em-adapter:
    build:
      context: ../em-adapter
      dockerfile: Dockerfile
    env_file:
      - ./env/adapter.prod.env
    expose:
      - "8080"
    volumes:
      - ./logs:/app/logs
    depends_on:
      - em-discovery
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Collector сервис
  em-collector:
    build:
      context: ../em-collector
      dockerfile: Dockerfile
    env_file:
      - ./env/collector.prod.env
    expose:
      - "8080"
    volumes:
      - ./logs:/app/logs
    depends_on:
      - em-discovery
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Processor сервис
  em-processor:
    build:
      context: ../em-processor
      dockerfile: Dockerfile
    env_file:
      - ./env/processor.prod.env
    expose:
      - "8080"
    volumes:
      - ./logs:/app/logs
    depends_on:
      - em-discovery
      - redis
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus - система мониторинга и сбора метрик
  prometheus:
    image: prom/prometheus:v3.2.1
    env_file:
      - ./env/prometheus.prod.env
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'                                      # Путь к конфигурационному файлу
      - '--storage.tsdb.path=/prometheus'                                                   # Путь для хранения данных
      - '--storage.tsdb.retention.time=${PROMETHEUS_RETENTION_TIME:-15d}'                   # Время хранения данных (по умолчанию 15 дней)
      - '--web.console.libraries=/etc/prometheus/console_libraries'                         # Путь к js-библиотекам консоли
      - '--web.console.templates=/etc/prometheus/consoles'                                  # Путь к html-шаблонам консоли
      - '--web.enable-lifecycle'                                                            # Включение API жизненного цикла
      - '--web.enable-admin-api=${PROMETHEUS_WEB_ENABLE_ADMIN_API:-false}'                  # Включение/отключение админ API
    restart: always                                                                         # Всегда перезапускать контейнер
    healthcheck:
      test: [ "CMD", "wget", "-q", "--spider", "http://localhost:9090/-/healthy" ]          # Проверка здоровья сервиса
      interval: 30s                                                                         # Интервал проверки
      timeout: 10s                                                                          # Таймаут ожидания ответа
      retries: 3                                                                            # Количество попыток

  # Grafana - система визуализации метрик
  grafana:
    image: grafana/grafana:11.5.2
    env_file:
      - ./env/grafana.prod.env
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini:ro                                   # Монтируем кастомный конфиг файл
      - ./grafana/provisioning:/etc/grafana/provisioning:ro                                 # Монтируем директорию с настройками
      - grafana_data:/var/lib/grafana                                                       # Том для хранения данных
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}                                 # Имя пользователя из переменной окружения
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}                         # Пароль из переменной окружения
      - GF_USERS_ALLOW_SIGN_UP=false                                                        # Запрещаем регистрацию новых пользователей
      - GF_AUTH_ANONYMOUS_ENABLED=false                                                     # Отключаем анонимный доступ в продакшн
      - GF_FEATURE_TOGGLES_ENABLE=lokiLive,lokiLogRowContext                                # Включаем только функции для работы с логами
    depends_on:
      - prometheus                                                                          # Зависимость от Prometheus
      - loki                                                                                # Зависимость от Loki
    restart: always                                                                         # Всегда перезапускать контейнер
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Loki - система сбора и хранения логов
  loki:
    image: grafana/loki:3.4.2
    env_file:
      - ./env/loki.prod.env
    ports:
      - "3100:3100"                                                                         # Порт для API Loki
      - "7946:7946"                                                                         # Порт для memberlist (кластеризация)
    volumes:
      - ./loki/loki.prod.yml:/etc/loki/loki.prod.yml:ro                                     # Монтируем конфигурационный файл
      - loki_data:/loki                                                                     # Том для хранения данных
      - loki_wal:/wal                                                                       # Том для WAL директории
    command: >
      -config.file=${LOKI_CONFIG_PATH:-/etc/loki/loki.prod.yml}
      -log.level=${LOG_LEVEL:-info}
      -validation.allow-structured-metadata=false
    user: "0"                                                                               # Запускаем от имени root для решения проблем с правами
    depends_on:
      - minio                                                                               # Зависимость от MinIO
    restart: always                                                                         # Всегда перезапускать контейнер
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:3100/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Promtail - агент для сбора логов
  promtail:
    image: grafana/promtail:3.4.2
    env_file:
      - ./env/promtail.prod.env
    volumes:
      - ./promtail/promtail.prod.yml:/etc/promtail/promtail.prod.yml:ro                     # Монтируем конфигурационный файл
      - ./logs:/logs:ro                                                                     # Доступ к логам микросервисов (только чтение)
      - /var/log:/var/log:ro                                                                # Доступ к логам хоста (только чтение)
      - /var/lib/docker/containers:/var/lib/docker/containers:ro                            # Доступ к логам контейнеров (только чтение)
      - promtail_data:/data                                                                 # Том для хранения позиций
    command: >
      -config.file=${PROMTAIL_CONFIG_PATH:-/etc/promtail/promtail.prod.yml}
      -log.level=${LOG_LEVEL:-info}
    depends_on:
      - loki                                                                                # Зависимость от Loki
    restart: always                                                                         # Всегда перезапускать контейнер

  # MinIO - S3-совместимое хранилище. Используется для хранения логов Loki
  minio:
    image: minio/minio:RELEASE.2025-02-28T09-55-16Z
    env_file:
      - ./env/minio.prod.env
    ports:
      - "9000:9000"                                                                         # Порт для API
      - "9001:9001"                                                                         # Порт для консоли
    volumes:
      - minio_data:/data                                                                    # Том для хранения данных
    command: server /data --console-address ":9001"                                         # Запуск сервера с консолью
    restart: always                                                                         # Всегда перезапускать контейнер
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO Client - для создания бакета при первом запуске
  minio-client:
    image: minio/mc:RELEASE.2025-02-21T16-00-46Z
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 10;
      /usr/bin/mc config host add myminio http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb --ignore-existing myminio/loki-logs;
      exit 0;
      "
    restart: on-failure                                                                     # Перезапускать только при ошибке


volumes:
  es_data:                                                                                  # Том для хранения данных Elasticsearch
    driver: local
  redis_data:                                                                               # Том для хранения данных Redis
    driver: local
  prometheus_data:                                                                          # Том для хранения данных Prometheus
    driver: local
  grafana_data:                                                                             # Том для хранения данных Grafana
    driver: local
  minio_data:                                                                               # Том для хранения данных MinIO
    driver: local
  loki_data:                                                                                # Том для хранения данных Loki
    driver: local
  loki_wal:                                                                                 # Том для хранения WAL Loki
    driver: local
  promtail_data:                                                                            # Том для хранения данных Promtail
    driver: local