version: '3.8'

services:
  # Eureka сервер
  em-discovery:
    build:
      context: ../em-discovery
      dockerfile: Dockerfile
    ports:
      - "8761:8761"

  # API Gateway
  em-gateway:
    build:
      context: ../em-gateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - em-discovery

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.17.1
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - es_data_dev:/usr/share/elasticsearch/data
      - ./elasticsearch/elasticsearch.dev.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro

  # Redis
  redis:
    image: redis:7.4.2
    ports:
      - "6379:6379"
    volumes:
      - ./redis/redis.dev.conf:/usr/local/etc/redis/redis.conf:ro                                # Монтируем dev конфиг
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]                                 # Запускаем с нашим конфигом

  # API сервис
  em-api:
    build:
      context: ../em-api
      dockerfile: Dockerfile
    ports:
      - "8081:8080"
    depends_on:
      - elasticsearch
      - em-discovery
    volumes:
      - ./logs:/app/logs
    environment:
      - SPRING_PROFILES_ACTIVE=dev

  # Adapter сервис
  em-adapter:
    build:
      context: ../em-adapter
      dockerfile: Dockerfile
    ports:
      - "8082:8080"
    depends_on:
      - em-discovery
    volumes:
      - ./logs:/app/logs
    environment:
      - SPRING_PROFILES_ACTIVE=dev

  # Collector сервис
  em-collector:
    build:
      context: ../em-collector
      dockerfile: Dockerfile
    ports:
      - "8083:8080"
    depends_on:
      - em-discovery
    volumes:
      - ./logs:/app/logs
    environment:
      - SPRING_PROFILES_ACTIVE=dev

  # Processor сервис
  em-processor:
    build:
      context: ../em-processor
      dockerfile: Dockerfile
    ports:
      - "8084:8080"
    depends_on:
      - em-discovery
      - redis
    volumes:
      - ./logs:/app/logs
    environment:
      - SPRING_PROFILES_ACTIVE=dev

  # Prometheus - система мониторинга и сбора метрик
  prometheus:
    image: prom/prometheus:v3.2.1
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data_dev:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'                                            # Путь к конфиг файлу
      - '--storage.tsdb.path=/prometheus'                                                         # Путь для хранения данных
      - '--web.console.libraries=/etc/prometheus/console_libraries'                               # Путь к js-библиотекам консоли
      - '--web.console.templates=/etc/prometheus/consoles'                                        # Путь к html-шаблонам консоли
      - '--web.enable-lifecycle'

  # Grafana - система визуализации метрик
  grafana:
    image: grafana/grafana:11.5.2
    ports:
      - "3000:3000"                                                                               # Порт для доступа к веб-интерфейсу Grafana
    volumes:
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini:ro                                         # Монтируем кастомный конфиг файл
      - ./grafana/provisioning:/etc/grafana/provisioning:ro                                       # Монтируем директорию с настройками
      - grafana_data_dev:/var/lib/grafana                                                         # Том для хранения данных
    environment:
      - GF_SECURITY_ADMIN_USER=admin                                                              # Имя пользователя по умолчанию
      - GF_SECURITY_ADMIN_PASSWORD=admin                                                          # Пароль по умолчанию (изменить в продакшн)
      - GF_USERS_ALLOW_SIGN_UP=false                                                              # Запрещаем регистрацию новых пользователей
      - GF_FEATURE_TOGGLES_ENABLE=lokiLive,lokiLogRowContext                                      # Включаем только функции для работы с логами
    depends_on:
      - prometheus                                                                                # Зависимость от Prometheus
      - loki                                                                                      # Зависимость от Loki

  # Loki - система сбора и хранения логов
  loki:
    image: grafana/loki:3.4.2
    ports:
      - "3100:3100"                                                                               # Порт для API Loki
    volumes:
      - ./loki/loki.dev.yml:/etc/loki/loki.dev.yml:ro                                             # Монтируем конфигурационный файл
      - loki_data_dev:/loki                                                                       # Том для хранения данных
      - loki_wal_dev:/wal                                                                         # Том для WAL директории
    command: >
      -config.file=${LOKI_CONFIG_PATH:-/etc/loki/loki.dev.yml}
      -log.level=${LOG_LEVEL:-info}
      -validation.allow-structured-metadata=false                                                 # Отключаем проверку структурированных метаданных
    user: "0"                                                                                     # Запускаем от имени root для решения проблем с правами
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:3100/ready || exit 1"]
      interval: 30s
      timeout: 10s

  # Promtail - агент для сбора логов
  promtail:
    image: grafana/promtail:3.4.2
    volumes:
      - ./promtail/promtail.dev.yml:/etc/promtail/promtail.dev.yml:ro                             # Монтируем конфигурационный файл
      - ./logs:/logs:ro                                                                           # Доступ к логам микросервисов (только чтение)
      - /var/log:/var/log:ro                                                                      # Доступ к логам хоста (только чтение)
      - /var/lib/docker/containers:/var/lib/docker/containers:ro                                  # Доступ к логам контейнеров (только чтение)
    command: >
      -config.file=${PROMTAIL_CONFIG_PATH:-/etc/promtail/promtail.dev.yml}
      -log.level=${LOG_LEVEL:-info}
    depends_on:
      - loki                                                                                      # Зависимость от Loki

volumes:
  es_data_dev:                                                                                    # Том для хранения данных Elasticsearch в dev среде
    driver: local
  prometheus_data_dev:                                                                            # Том для хранения данных Prometheus в dev среде
    driver: local
  grafana_data_dev:                                                                               # Том для хранения данных Grafana в dev среде
    driver: local
  loki_data_dev:                                                                                  # Том для хранения данных Loki в dev среде
    driver: local
  loki_wal_dev:                                                                                   # Том для хранения WAL Loki в dev среде
    driver: local